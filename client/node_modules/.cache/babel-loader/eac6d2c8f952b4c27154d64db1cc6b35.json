{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, signUpErrorMsg } from \"./user.actions\"; // actually sign in\n\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\n  try {\n    // get document reference (user data info) back from firebase.utils\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData); //  Get user actual data (snapShot)\n\n    const userSnapshot = yield userRef.get(); // dispatch new action > success - sign in\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    // destructor out  userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // check email & password > match db > destructor out userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // check if user has signed in\n\nexport function* isUserAuthenticated() {\n  try {\n    // get userAuth obj from getCurrentUser\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // not sign in > exit\n    // if userAuth obj > sign in\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // To sign out\n\nexport function* signOut() {\n  try {\n    yield auth.signOut(); // dispatch new action > sign out\n\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} // To sign up\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  // userCredentials\n  try {\n    // create new user    (destructor out userAuth obj from return value)\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); // dispatch new action    (userAuth, additionalData)\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  // send to firebase to create new user (snapShot) > sign in\n  yield getSnapshotFromUserAuth(user, additionalData);\n}\nexport function* signUpErrorMessage({\n  payload: errorCode\n}) {\n  const errCode = yield errorCode;\n\n  if (errCode === 'auth/weak-password') {\n    yield put(signUpErrorMsg('Password too short'));\n  } else if (errCode === 'auth/email-already-in-use') {\n    yield put(signUpErrorMsg('Email already in use'));\n  } else if (errCode === 'auth/invalid-email') {\n    yield put(signUpErrorMsg('The email address is badly formatted'));\n  } else if (errCode === 'auth/operation-not-allowed') {\n    yield put(signUpErrorMsg('Email / password accounts are not enabled'));\n  } else {\n    yield put(signUpErrorMsg('Error signing up'));\n  }\n} // base saga - google sign in\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle);\n} // base saga - email sign in\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail);\n} // base saga - persist user sign in\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // base saga - sign in error msg\n\nexport function* onSignInFailure() {\n  yield takeLatest(UserActionTypes.SIGN_IN_ERROR_MSG, signInErrorMessage);\n} // base saga - sign out\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_PENDING, signOut);\n} // base saga - sign up\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_PENDING, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* onSignUpFailure() {\n  yield takeLatest(UserActionTypes.SIGN_UP_FAILURE, signUpErrorMessage);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart), call(onSignUpSuccess), call(onSignUpFailure)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","signUpErrorMsg","getSnapshotFromUserAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","signInAfterSignUp","signUpErrorMessage","errorCode","errCode","onGoogleSignInStart","GOOGLE_SIGN_IN_PENDING","onEmailSignInStart","EMAIL_SIGN_IN_PENDING","onCheckUserSession","CHECK_USER_SESSION","onSignInFailure","SIGN_IN_ERROR_MSG","signInErrorMessage","onSignOutStart","SIGN_OUT_PENDING","onSignUpStart","SIGN_UP_PENDING","onSignUpSuccess","SIGN_UP_SUCCESS","onSignUpFailure","SIGN_UP_FAILURE","userSagas"],"mappings":"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","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./user.types\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure, signUpErrorMsg } from \"./user.actions\";\r\n\r\n// actually sign in\r\nexport function* getSnapshotFromUserAuth(userAuth, additionalData) {\r\n  try {\r\n    // get document reference (user data info) back from firebase.utils\r\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n    //  Get user actual data (snapShot)\r\n    const userSnapshot = yield userRef.get();\r\n    // dispatch new action > success - sign in\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    // destructor out  userAuth obj from return value\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    // check email & password > match db > destructor out userAuth obj from return value\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n// check if user has signed in\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    // get userAuth obj from getCurrentUser\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return; // not sign in > exit\r\n    // if userAuth obj > sign in\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n// To sign out\r\nexport function* signOut(){\r\n    try{\r\n        yield auth.signOut();\r\n        // dispatch new action > sign out\r\n        yield put(signOutSuccess());\r\n    }catch(error){\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\n// To sign up\r\nexport function* signUp({ payload: { email, password, displayName } }){  // userCredentials\r\n  try{\r\n    // create new user    (destructor out userAuth obj from return value)\r\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n    // dispatch new action    (userAuth, additionalData)\r\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n  }catch(error){\r\n    yield put(signUpFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInAfterSignUp({ payload: { user, additionalData } }){\r\n  // send to firebase to create new user (snapShot) > sign in\r\n  yield getSnapshotFromUserAuth(user, additionalData);\r\n}\r\n\r\nexport function* signUpErrorMessage({ payload:  errorCode  }){\r\n  const errCode = yield errorCode;\r\n  if(errCode === 'auth/weak-password'){\r\n    yield put(signUpErrorMsg('Password too short'))\r\n  }else if(errCode === 'auth/email-already-in-use'){\r\n    yield put(signUpErrorMsg('Email already in use'))\r\n  }else if(errCode === 'auth/invalid-email'){\r\n    yield put(signUpErrorMsg('The email address is badly formatted'))\r\n  }else if(errCode === 'auth/operation-not-allowed'){\r\n    yield put(signUpErrorMsg('Email / password accounts are not enabled'))\r\n  }else{\r\n    yield put(signUpErrorMsg('Error signing up'))\r\n  }\r\n}\r\n\r\n\r\n// base saga - google sign in\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle);\r\n}\r\n\r\n// base saga - email sign in\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail);\r\n}\r\n\r\n// base saga - persist user sign in\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\n// base saga - sign in error msg\r\nexport function* onSignInFailure(){\r\n  yield takeLatest(UserActionTypes.SIGN_IN_ERROR_MSG, signInErrorMessage);\r\n}\r\n\r\n// base saga - sign out\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_PENDING, signOut);\r\n}\r\n\r\n// base saga - sign up\r\nexport function* onSignUpStart(){\r\n  yield takeLatest(UserActionTypes.SIGN_UP_PENDING, signUp);\r\n}\r\n\r\nexport function* onSignUpSuccess(){\r\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\r\n}\r\n\r\nexport function* onSignUpFailure(){\r\n  yield takeLatest(UserActionTypes.SIGN_UP_FAILURE, signUpErrorMessage);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOutStart),\r\n    call(onSignUpStart),\r\n    call(onSignUpSuccess),\r\n    call(onSignUpFailure)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}