{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from './user.actions'; // actually sign in with google\n\nfunction* signInWithGoogle() {\n  try {\n    // destructor out  userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider); // get document reference (user data) back from firebase.utils\n\n    const userRef = yield call(createUserProfileDocument, user); //  Get user actual data (snapShot)\n\n    const userSnapshot = yield userRef.get(); // dispatch > set state - sign in\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(googleSignInFailure(error));\n  }\n} // base saga - google sign in\n\n\nfunction* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle);\n} // actually sign in with email\n\n\nfunction* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // destructor out userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password); // get document reference (user data) back from firebase.utils\n\n    const userRef = yield call(createUserProfileDocument, user); //  Get user actual data (snapShot)\n\n    const userSnapshot = yield userRef.get(); // dispatch > set state - sign in\n\n    yield put(googleSignInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(emailSignInFailure(error));\n  }\n} // base saga - email sign in\n\n\nfunction* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail);\n}\n\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","googleSignInSuccess","googleSignInFailure","emailSignInSuccess","emailSignInFailure","signInWithGoogle","user","signInWithPopup","userRef","userSnapshot","get","id","data","error","onGoogleSignInStart","GOOGLE_SIGN_IN_PENDING","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onEmailSignInStart","EMAIL_SIGN_IN_PENDING","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,QAAgE,+BAAhE;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,kBAAnD,EAAuEC,kBAAvE,QAAiG,gBAAjG,C,CAGA;;AACA,UAAUC,gBAAV,GAA4B;AACxB,MAAG;AACC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACS,eAAL,CAAqBR,cAArB,CAAvB,CAFD,CAGC;;AACA,UAAMS,OAAO,GAAG,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B,CAJD,CAKC;;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAND,CAOC;;AACA,UAAMhB,GAAG,CAACO,mBAAmB,CAAC;AAAEU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAApB,CAAT;AACH,GATD,CASE,OAAMC,KAAN,EAAY;AACV,UAAMnB,GAAG,CAACQ,mBAAmB,CAACW,KAAD,CAApB,CAAT;AACH;AACJ,C,CAED;;;AACA,UAAUC,mBAAV,GAA+B;AAC3B,QAAMrB,UAAU,CAACI,eAAe,CAACkB,sBAAjB,EAAyCV,gBAAzC,CAAhB;AACH,C,CAGD;;;AACA,UAAUW,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA2D;AACvD,MAAG;AACC;AACA,UAAM;AAAEb,MAAAA;AAAF,QAAW,MAAMR,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB,CAFD,CAGC;;AACA,UAAMX,OAAO,GAAG,MAAMZ,IAAI,CAACI,yBAAD,EAA4BM,IAA5B,CAA1B,CAJD,CAKC;;AACA,UAAMG,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAND,CAOC;;AACA,UAAMhB,GAAG,CAACO,mBAAmB,CAAC;AAAEU,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAApB,CAAT;AACH,GATD,CASC,OAAMC,KAAN,EAAY;AACT,UAAMnB,GAAG,CAACU,kBAAkB,CAACS,KAAD,CAAnB,CAAT;AACH;AACJ,C,CAED;;;AACA,UAAUQ,kBAAV,GAA8B;AAC1B,QAAM5B,UAAU,CAACI,eAAe,CAACyB,qBAAjB,EAAwCN,eAAxC,CAAhB;AACH;;AAED,OAAO,UAAUO,SAAV,GAAsB;AACzB,QAAM5B,GAAG,CAAC,CACNC,IAAI,CAACkB,mBAAD,CADE,EAENlB,IAAI,CAACyB,kBAAD,CAFE,CAAD,CAAT;AAIH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport UserActionTypes from './user.types';\r\nimport { auth, googleProvider, createUserProfileDocument } from '../../firebase/firebase.utils';\r\nimport { googleSignInSuccess, googleSignInFailure, emailSignInSuccess, emailSignInFailure } from './user.actions';\r\n\r\n\r\n// actually sign in with google\r\nfunction* signInWithGoogle(){\r\n    try{\r\n        // destructor out  userAuth obj from return value\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        // get document reference (user data) back from firebase.utils\r\n        const userRef = yield call(createUserProfileDocument, user)\r\n        //  Get user actual data (snapShot)\r\n        const userSnapshot = yield userRef.get();\r\n        // dispatch > set state - sign in\r\n        yield put(googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch(error){\r\n        yield put(googleSignInFailure(error))\r\n    }\r\n}\r\n\r\n// base saga - google sign in\r\nfunction* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle)\r\n}\r\n\r\n\r\n// actually sign in with email\r\nfunction* signInWithEmail({ payload: { email, password } }){\r\n    try{\r\n        // destructor out userAuth obj from return value\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        // get document reference (user data) back from firebase.utils\r\n        const userRef = yield call(createUserProfileDocument, user)\r\n        //  Get user actual data (snapShot)\r\n        const userSnapshot = yield userRef.get();\r\n        // dispatch > set state - sign in\r\n        yield put(googleSignInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    }catch(error){\r\n        yield put(emailSignInFailure(error))\r\n    }\r\n}\r\n\r\n// base saga - email sign in\r\nfunction* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}