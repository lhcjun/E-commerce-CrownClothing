{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAUg7byYFBQpqxY2LhAjYeIo-6GcttuU7g\",\n  authDomain: \"crwn-db-9e20e.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-9e20e.firebaseio.com\",\n  projectId: \"crwn-db-9e20e\",\n  storageBucket: \"crwn-db-9e20e.appspot.com\",\n  messagingSenderId: \"608014898428\",\n  appId: \"1:608014898428:web:064879518ef426d336f379\",\n  measurementId: \"G-8FGK6JNDJF\"\n}; // To get user data\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // exit  (no valid obj)\n  // QueryReference > document reference\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // QuerySnapshot > get document snapshot\n\n  const snapShot = await userRef.get(); // check if user data exist\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create snapShot - create a new user if not exist\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google auth provider\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,MAAM,EAAE,yCADG;AAEXC,EAAAA,UAAU,EAAE,+BAFD;AAGXC,EAAAA,WAAW,EAAE,sCAHF;AAIXC,EAAAA,SAAS,EAAE,eAJA;AAKXC,EAAAA,aAAa,EAAE,2BALJ;AAMXC,EAAAA,iBAAiB,EAAE,cANR;AAOXC,EAAAA,KAAK,EAAE,2CAPI;AAQXC,EAAAA,aAAa,EAAE;AARJ,CAAf,C,CAWA;;AACA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AACzE,MAAI,CAACD,QAAL,EAAe,OAD0D,CAClD;AACvB;;AACA,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAHyE,CAIzE;;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB,CALyE,CAMzE;;AACA,MAAG,CAACD,QAAQ,CAACE,MAAb,EAAoB;AAChB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBV,QAA/B;AACA,UAAMW,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AACA,QAAG;AACC;AACA,YAAMV,OAAO,CAACW,GAAR,CAAY;AAAEJ,QAAAA,WAAF;AAAeC,QAAAA,KAAf;AAAsBC,QAAAA,SAAtB;AAAiC,WAAGV;AAApC,OAAZ,CAAN;AACH,KAHD,CAGC,OAAMa,GAAN,EAAU;AACPC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,GAAG,CAACG,OAAvC;AACH;AACJ;;AACD,SAAOf,OAAP;AACH,CAlBM;AAqBPb,QAAQ,CAAC6B,aAAT,CAAuB5B,MAAvB;AAEA,OAAO,MAAM6B,IAAI,GAAG9B,QAAQ,CAAC8B,IAAT,EAAb;AACP,OAAO,MAAMhB,SAAS,GAAGd,QAAQ,CAACc,SAAT,EAAlB,C,CAEP;;AACA,MAAMiB,QAAQ,GAAG,IAAI/B,QAAQ,CAAC8B,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAe/B,QAAf","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAUg7byYFBQpqxY2LhAjYeIo-6GcttuU7g\",\r\n    authDomain: \"crwn-db-9e20e.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-9e20e.firebaseio.com\",\r\n    projectId: \"crwn-db-9e20e\",\r\n    storageBucket: \"crwn-db-9e20e.appspot.com\",\r\n    messagingSenderId: \"608014898428\",\r\n    appId: \"1:608014898428:web:064879518ef426d336f379\",\r\n    measurementId: \"G-8FGK6JNDJF\"\r\n};\r\n\r\n// To get user data\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return; // exit  (no valid obj)\r\n    // QueryReference > document reference\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    // QuerySnapshot > get document snapshot\r\n    const snapShot = await userRef.get();\r\n    // check if user data exist\r\n    if(!snapShot.exists){\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date();\r\n        try{\r\n            // create snapShot - create a new user if not exist\r\n            await userRef.set({ displayName, email, createdAt, ...additionalData })\r\n        }catch(err){\r\n            console.log('error creating user', err.message);\r\n        }\r\n    }\r\n    return userRef;\r\n}\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// Google auth provider\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}