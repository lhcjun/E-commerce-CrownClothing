{"ast":null,"code":"import { takeEvery } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types'; // query database\n\nexport function* fetchCollectionsAsync() {\n  yield console.log('fetchCollectionsAsync gen func is fired'); // QueryReference > collection reference\n\n  const collectionRef = firestore.collection(\"collections\"); // API call > get actual data(collections array snapshot) from firebase\n\n  collectionRef.get().then(snapshot => {\n    // Get collections obj data (converted from array)\n    const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n} // base saga - generator function\n\nexport function* fetchCollectionsStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_PENDING, fetchCollectionsAsync);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","console","log","collectionRef","collection","get","then","snapshot","collectionMap","dispatch","catch","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_PENDING"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AACA,OAAOC,eAAP,MAA4B,cAA5B,C,CAEA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,QAAMC,OAAO,CAACC,GAAR,CAAY,yCAAZ,CAAN,CADqC,CAGrC;;AACA,QAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB,CAJqC,CAMrC;;AACAD,EAAAA,aAAa,CACRE,GADL,GAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd;AACA,UAAMC,aAAa,GAAGZ,+BAA+B,CAACW,QAAD,CAArD;AACAE,IAAAA,QAAQ,CAACZ,uBAAuB,CAACW,aAAD,CAAxB,CAAR;AACH,GANL,EAOKE,KAPL,CAOWC,KAAK,IAAIF,QAAQ,CAACX,uBAAuB,CAACa,KAAK,CAACC,OAAP,CAAxB,CAP5B;AAQH,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMnB,SAAS,CAACK,eAAe,CAACe,yBAAjB,EAA4Cd,qBAA5C,CAAf;AACH","sourcesContent":["import { takeEvery } from 'redux-saga/effects';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\r\nimport ShopActionTypes from './shop.types';\r\n\r\n// query database\r\nexport function* fetchCollectionsAsync() {\r\n    yield console.log('fetchCollectionsAsync gen func is fired');\r\n\r\n    // QueryReference > collection reference\r\n    const collectionRef = firestore.collection(\"collections\");\r\n\r\n    // API call > get actual data(collections array snapshot) from firebase\r\n    collectionRef\r\n        .get()\r\n        .then(snapshot => {\r\n            // Get collections obj data (converted from array)\r\n            const collectionMap = convertCollectionsSnapshotToMap(snapshot);\r\n            dispatch(fetchCollectionsSuccess(collectionMap))\r\n        })\r\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)))\r\n}\r\n\r\n// base saga - generator function\r\nexport function* fetchCollectionsStart(){\r\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_PENDING, fetchCollectionsAsync)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}