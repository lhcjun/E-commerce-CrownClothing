{"ast":null,"code":"import { takeLatest, call, put, all } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types'; // query database - async action in generator function\n\nexport function* fetchCollectionsAsync() {\n  try {\n    // QueryReference > collection reference\n    const collectionRef = firestore.collection(\"collections\"); // API call > get actual data(collections array snapshot) from firebase\n\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot); // dispatch\n\n    yield put(fetchCollectionsSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error.message));\n  }\n} // base saga - generator function\n\nexport function* fetchCollectionsStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_PENDING, fetchCollectionsAsync);\n}\nexport function* shopSagas() {\n  yield all([call(fetchCollectionsStart)]);\n}\n;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","all","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionsAsync","collectionRef","collection","snapshot","get","collectionMap","error","message","fetchCollectionsStart","FETCH_COLLECTIONS_PENDING","shopSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,GAAhC,QAA2C,oBAA3C;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,gBAAjE;AACA,OAAOC,eAAP,MAA4B,cAA5B,C,CAEA;;AACA,OAAO,UAAUC,qBAAV,GAAkC;AACrC,MAAG;AACC;AACA,UAAMC,aAAa,GAAGN,SAAS,CAACO,UAAV,CAAqB,aAArB,CAAtB,CAFD,CAGC;;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMb,IAAI,CAACI,+BAAD,EAAkCO,QAAlC,CAAhC,CALD,CAMC;;AACA,UAAMV,GAAG,CAACI,uBAAuB,CAACQ,aAAD,CAAxB,CAAT;AACH,GARD,CAQC,OAAMC,KAAN,EAAY;AACT,UAAMb,GAAG,CAACK,uBAAuB,CAACQ,KAAK,CAACC,OAAP,CAAxB,CAAT;AACH;AACJ,C,CAED;;AACA,OAAO,UAAUC,qBAAV,GAAiC;AACpC,QAAMjB,UAAU,CAACQ,eAAe,CAACU,yBAAjB,EAA4CT,qBAA5C,CAAhB;AACH;AAED,OAAO,UAAUU,SAAV,GAAqB;AACxB,QAAMhB,GAAG,CAAC,CACNF,IAAI,CAACgB,qBAAD,CADE,CAAD,CAAT;AAGH;AAAA","sourcesContent":["import { takeLatest, call, put, all } from 'redux-saga/effects';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\r\nimport ShopActionTypes from './shop.types';\r\n\r\n// query database - async action in generator function\r\nexport function* fetchCollectionsAsync() {\r\n    try{\r\n        // QueryReference > collection reference\r\n        const collectionRef = firestore.collection(\"collections\");\r\n        // API call > get actual data(collections array snapshot) from firebase\r\n        const snapshot = yield collectionRef.get();\r\n        const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n        // dispatch\r\n        yield put(fetchCollectionsSuccess(collectionMap))\r\n    }catch(error){\r\n        yield put(fetchCollectionsFailure(error.message))\r\n    }\r\n}\r\n\r\n// base saga - generator function\r\nexport function* fetchCollectionsStart(){\r\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTIONS_PENDING, fetchCollectionsAsync)\r\n}\r\n\r\nexport function* shopSagas(){\r\n    yield all([\r\n        call(fetchCollectionsStart)\r\n    ])\r\n};"]},"metadata":{},"sourceType":"module"}