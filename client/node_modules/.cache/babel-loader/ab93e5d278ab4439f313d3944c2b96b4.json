{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nconst config = {\n  apiKey: \"AIzaSyAUg7byYFBQpqxY2LhAjYeIo-6GcttuU7g\",\n  authDomain: \"crwn-db-9e20e.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-9e20e.firebaseio.com\",\n  projectId: \"crwn-db-9e20e\",\n  storageBucket: \"crwn-db-9e20e.appspot.com\",\n  messagingSenderId: \"608014898428\",\n  appId: \"1:608014898428:web:064879518ef426d336f379\",\n  measurementId: \"G-8FGK6JNDJF\"\n};\nfirebase.initializeApp(config); // To get user data\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // exit  (no valid obj)\n  // QueryReference > document reference\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // QuerySnapshot > get document snapshot\n\n  const snapShot = await userRef.get(); // check if user data exist\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create snapShot - create a new user if not exist\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log(\"error creating user\", err.message);\n    }\n  }\n\n  return userRef;\n}; // Set value into firebase\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  // create new collection ref obj\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // create new document ref obj (in collection)  with unique id\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef); // set value with batch\n\n    batch.set(newDocRef, obj); // in obj\n  }); // fire batch req  >  commit will return promise\n\n  return await batch.commit();\n}; // To get collections array data > convert to obj  (for data normalization)\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  /* Firestore return an Array of Obj on the docs inside CollectionsReference Snapshot\r\n       => get docs array(5)(collections obj) in querySnapshot obj */\n  const transformedCollection = collections.docs.map(doc => {\n    // get actual data from each collection\n    const {\n      title,\n      items\n    } = doc.data(); // return as obj (in array)\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  }); // convert array to obj\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    // listen to login / logout event\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth); // get updated userAuth obj\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google auth provider\n\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyAUg7byYFBQpqxY2LhAjYeIo-6GcttuU7g\",\r\n  authDomain: \"crwn-db-9e20e.firebaseapp.com\",\r\n  databaseURL: \"https://crwn-db-9e20e.firebaseio.com\",\r\n  projectId: \"crwn-db-9e20e\",\r\n  storageBucket: \"crwn-db-9e20e.appspot.com\",\r\n  messagingSenderId: \"608014898428\",\r\n  appId: \"1:608014898428:web:064879518ef426d336f379\",\r\n  measurementId: \"G-8FGK6JNDJF\",\r\n};\r\n\r\nfirebase.initializeApp(config);\r\n\r\n// To get user data\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if (!userAuth) return; // exit  (no valid obj)\r\n  // QueryReference > document reference\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n  // QuerySnapshot > get document snapshot\r\n  const snapShot = await userRef.get();\r\n  // check if user data exist\r\n  if (!snapShot.exists) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n    try {\r\n      // create snapShot - create a new user if not exist\r\n      await userRef.set({ displayName, email, createdAt, ...additionalData });\r\n    } catch (err) {\r\n      console.log(\"error creating user\", err.message);\r\n    }\r\n  }\r\n  return userRef;\r\n};\r\n\r\n// Set value into firebase\r\nexport const addCollectionAndDocuments = async (\r\n  collectionKey,\r\n  objectsToAdd\r\n) => {\r\n  // create new collection ref obj\r\n  const collectionRef = firestore.collection(collectionKey);\r\n  console.log(collectionRef);\r\n\r\n  const batch = firestore.batch();\r\n  objectsToAdd.forEach((obj) => {\r\n    // create new document ref obj (in collection)  with unique id\r\n    const newDocRef = collectionRef.doc();\r\n    console.log(newDocRef);\r\n    // set value with batch\r\n    batch.set(newDocRef, obj); // in obj\r\n  });\r\n  // fire batch req  >  commit will return promise\r\n  return await batch.commit();\r\n};\r\n\r\n// To get collections array data > convert to obj  (for data normalization)\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  /* Firestore return an Array of Obj on the docs inside CollectionsReference Snapshot\r\n       => get docs array(5)(collections obj) in querySnapshot obj */\r\n  const transformedCollection = collections.docs.map((doc) => {\r\n    // get actual data from each collection\r\n    const { title, items } = doc.data();\r\n    // return as obj (in array)\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items,\r\n    };\r\n  });\r\n  // convert array to obj\r\n  return transformedCollection.reduce((accumulator, collection) => {\r\n    accumulator[collection.title.toLowerCase()] = collection;\r\n    return accumulator;\r\n  }, {});\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n  return new Promise((resolve, reject) => {\r\n    // listen to login / logout event\r\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\r\n      unsubscribe();\r\n      resolve(userAuth); // get updated userAuth obj\r\n    }, reject);\r\n  });\r\n};\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// Google auth provider\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: \"select_account\" });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;\r\n"]},"metadata":{},"sourceType":"module"}