{"ast":null,"code":"import { takeLatest, put, all, call } from \"redux-saga/effects\";\nimport UserActionTypes from \"./user.types\";\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from \"../../firebase/firebase.utils\";\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from \"./user.actions\"; // actually sign in\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    // get document reference (user data) back from firebase.utils\n    const userRef = yield call(createUserProfileDocument, userAuth); //  Get user actual data (snapShot)\n\n    const userSnapshot = yield userRef.get(); // dispatch new action > success - sign in\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    // destructor out  userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // destructor out userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // check if user has signed in\n\nexport function* isUserAuthenticated() {\n  try {\n    // get userAuth obj from getCurrentUser\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // not sign in > exit\n    // if userAuth obj > sign in\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // To sign out\n\nexport function* signOut() {\n  try {\n    yield auth.signOut(); // dispatch new action > sign out\n\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure(error));\n  }\n} // To sign up\n\nexport function* signUp({\n  payload: {\n    email,\n    password,\n    displayName\n  }\n}) {\n  try {\n    // create new user\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); // peremeter \n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n} // base saga - google sign in\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle);\n} // base saga - email sign in\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail);\n} // base saga - persist user sign in\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n} // base saga - sign out\n\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_PENDING, signOut);\n} // base saga - sign up\n\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_PENDING, signUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpSuccess","signUpFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","signOut","signUp","displayName","createUserWithEmailAndPassword","additionalData","onGoogleSignInStart","GOOGLE_SIGN_IN_PENDING","onEmailSignInStart","EMAIL_SIGN_IN_PENDING","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_PENDING","onSignUpStart","SIGN_UP_PENDING","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SACEC,IADF,EAEEC,cAFF,EAGEC,yBAHF,EAIEC,cAJF,QAKO,+BALP;AAMA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,cAAvC,EAAuDC,cAAvD,EAAuEC,aAAvE,EAAsFC,aAAtF,QAA2G,gBAA3G,C,CAEA;;AACA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA4C;AACjD,MAAI;AACF;AACA,UAAMC,OAAO,GAAG,MAAMd,IAAI,CAACI,yBAAD,EAA4BS,QAA5B,CAA1B,CAFE,CAGF;;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAJE,CAKF;;AACA,UAAMlB,GAAG,CAACQ,aAAa,CAAC;AAAEW,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACd,UAAMrB,GAAG,CAACS,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,MAAI;AACF;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMnB,IAAI,CAACoB,eAAL,CAAqBnB,cAArB,CAAvB;AACA,UAAMS,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAJD,CAIE,OAAOF,KAAP,EAAc;AACd,UAAMrB,GAAG,CAACS,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF;AAED,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA4D;AACjE,MAAI;AACF;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMnB,IAAI,CAACyB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACD,GAJD,CAIE,OAAOF,KAAP,EAAc;AACd,UAAMrB,GAAG,CAACS,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUS,mBAAV,GAAgC;AACrC,MAAI;AACF;AACA,UAAMf,QAAQ,GAAG,MAAMR,cAAc,EAArC;AACA,QAAI,CAACQ,QAAL,EAAe,OAHb,CAGqB;AACvB;;AACA,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACD,GAND,CAME,OAAOM,KAAP,EAAc;AACd,UAAMrB,GAAG,CAACS,aAAa,CAACY,KAAD,CAAd,CAAT;AACD;AACF,C,CAED;;AACA,OAAO,UAAUU,OAAV,GAAmB;AACtB,MAAG;AACC,UAAM3B,IAAI,CAAC2B,OAAL,EAAN,CADD,CAEC;;AACA,UAAM/B,GAAG,CAACU,cAAc,EAAf,CAAT;AACH,GAJD,CAIC,OAAMW,KAAN,EAAY;AACT,UAAMrB,GAAG,CAACW,cAAc,CAACU,KAAD,CAAf,CAAT;AACH;AACJ,C,CAED;;AACA,OAAO,UAAUW,MAAV,CAAiB;AAAEN,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBK,IAAAA;AAAnB;AAAX,CAAjB,EAA+D;AACpE,MAAG;AACD;AACA,UAAM;AAAEV,MAAAA;AAAF,QAAW,MAAMnB,IAAI,CAAC8B,8BAAL,CAAoCP,KAApC,EAA2CC,QAA3C,CAAvB,CAFC,CAGD;;AACA,UAAM5B,GAAG,CAACY,aAAa,CAAC;AAAEW,MAAAA,IAAF;AAAQY,MAAAA,cAAc,EAAE;AAAEF,QAAAA;AAAF;AAAxB,KAAD,CAAd,CAAT;AACD,GALD,CAKC,OAAMZ,KAAN,EAAY;AACX,UAAMrB,GAAG,CAACa,aAAa,CAACQ,KAAD,CAAd,CAAT;AACD;AACF,C,CAGD;;AACA,OAAO,UAAUe,mBAAV,GAAgC;AACrC,QAAMrC,UAAU,CAACI,eAAe,CAACkC,sBAAjB,EAAyCf,gBAAzC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUgB,kBAAV,GAA+B;AACpC,QAAMvC,UAAU,CAACI,eAAe,CAACoC,qBAAjB,EAAwCd,eAAxC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUe,kBAAV,GAA+B;AACpC,QAAMzC,UAAU,CAACI,eAAe,CAACsC,kBAAjB,EAAqCX,mBAArC,CAAhB;AACD,C,CAED;;AACA,OAAO,UAAUY,cAAV,GAA0B;AAC7B,QAAM3C,UAAU,CAACI,eAAe,CAACwC,gBAAjB,EAAmCZ,OAAnC,CAAhB;AACH,C,CAED;;AACA,OAAO,UAAUa,aAAV,GAAyB;AAC9B,QAAM7C,UAAU,CAACI,eAAe,CAAC0C,eAAjB,EAAkCb,MAAlC,CAAhB;AACD;AAED,OAAO,UAAUc,SAAV,GAAsB;AAC3B,QAAM7C,GAAG,CAAC,CACRC,IAAI,CAACkC,mBAAD,CADI,EAERlC,IAAI,CAACoC,kBAAD,CAFI,EAGRpC,IAAI,CAACsC,kBAAD,CAHI,EAIRtC,IAAI,CAACwC,cAAD,CAJI,EAKRxC,IAAI,CAAC0C,aAAD,CALI,CAAD,CAAT;AAOD","sourcesContent":["import { takeLatest, put, all, call } from \"redux-saga/effects\";\r\nimport UserActionTypes from \"./user.types\";\r\nimport {\r\n  auth,\r\n  googleProvider,\r\n  createUserProfileDocument,\r\n  getCurrentUser,\r\n} from \"../../firebase/firebase.utils\";\r\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpSuccess, signUpFailure } from \"./user.actions\";\r\n\r\n// actually sign in\r\nexport function* getSnapshotFromUserAuth(userAuth) {\r\n  try {\r\n    // get document reference (user data) back from firebase.utils\r\n    const userRef = yield call(createUserProfileDocument, userAuth);\r\n    //  Get user actual data (snapShot)\r\n    const userSnapshot = yield userRef.get();\r\n    // dispatch new action > success - sign in\r\n    yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }));\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithGoogle() {\r\n  try {\r\n    // destructor out  userAuth obj from return value\r\n    const { user } = yield auth.signInWithPopup(googleProvider);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }) {\r\n  try {\r\n    // destructor out userAuth obj from return value\r\n    const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n    yield getSnapshotFromUserAuth(user);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n// check if user has signed in\r\nexport function* isUserAuthenticated() {\r\n  try {\r\n    // get userAuth obj from getCurrentUser\r\n    const userAuth = yield getCurrentUser();\r\n    if (!userAuth) return; // not sign in > exit\r\n    // if userAuth obj > sign in\r\n    yield getSnapshotFromUserAuth(userAuth);\r\n  } catch (error) {\r\n    yield put(signInFailure(error));\r\n  }\r\n}\r\n\r\n// To sign out\r\nexport function* signOut(){\r\n    try{\r\n        yield auth.signOut();\r\n        // dispatch new action > sign out\r\n        yield put(signOutSuccess());\r\n    }catch(error){\r\n        yield put(signOutFailure(error));\r\n    }\r\n}\r\n\r\n// To sign up\r\nexport function* signUp({ payload: { email, password, displayName } }){\r\n  try{\r\n    // create new user\r\n    const { user } = yield auth.createUserWithEmailAndPassword(email, password);\r\n    // peremeter \r\n    yield put(signUpSuccess({ user, additionalData: { displayName } }));\r\n  }catch(error){\r\n    yield put(signUpFailure(error));\r\n  }\r\n}\r\n\r\n\r\n// base saga - google sign in\r\nexport function* onGoogleSignInStart() {\r\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle);\r\n}\r\n\r\n// base saga - email sign in\r\nexport function* onEmailSignInStart() {\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail);\r\n}\r\n\r\n// base saga - persist user sign in\r\nexport function* onCheckUserSession() {\r\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\r\n}\r\n\r\n// base saga - sign out\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_PENDING, signOut);\r\n}\r\n\r\n// base saga - sign up\r\nexport function* onSignUpStart(){\r\n  yield takeLatest(UserActionTypes.SIGN_UP_PENDING, signUp);\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onGoogleSignInStart),\r\n    call(onEmailSignInStart),\r\n    call(onCheckUserSession),\r\n    call(onSignOutStart),\r\n    call(onSignUpStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}