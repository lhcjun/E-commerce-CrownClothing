{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Andrei's Course\\\\CRA\\\\E-commerce-CrownClothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\nimport CollectionPage from \"../collection/collection.component\";\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n\n    this.getFirebaseData = data => {\n      const getCollections = data.documents.map(document => document.fields.items.arrayValue.values.map(value => value.mapValue.fields));\n      console.log(getCollections);\n    };\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props; // QueryReference > collection reference\n\n    const collectionRef = firestore.collection(\"collections\"); // listen to collectionRef update > get actual data(collections array snapshot)\n    // collectionRef.get().then(snapshot => {\n    //     // Get collections obj data (converted from array)\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap)\n    //     this.setState({ loading: false });\n    // })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromSnapshot();\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`\n      /* matching current path */\n      ,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionMap => dispatch(updateCollections(collectionMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/pages/shop/shop.component.jsx"],"names":["React","Component","Route","connect","firestore","convertCollectionsSnapshotToMap","updateCollections","WithSpinner","CollectionsOverview","CollectionPage","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","state","loading","unsubscribeFromSnapshot","getFirebaseData","data","getCollections","documents","map","document","fields","items","arrayValue","values","value","mapValue","console","log","componentDidMount","props","collectionRef","collection","componentWillUnmount","render","match","path","mapDispatchToProps","dispatch","collectionMap"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACEC,SADF,EAEEC,+BAFF,QAGO,+BAHP;AAIA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,MAAMC,6BAA6B,GAAGH,WAAW,CAACC,mBAAD,CAAjD;AACA,MAAMG,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBX,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAC/BY,KAD+B,GACvB;AACNC,MAAAA,OAAO,EAAE;AADH,KADuB;AAAA,SAM/BC,uBAN+B,GAML,IANK;;AAAA,SAwB/BC,eAxB+B,GAwBZC,IAAD,IAAU;AAC1B,YAAMC,cAAc,GAAGD,IAAI,CAACE,SAAL,CAAeC,GAAf,CAAoBC,QAAD,IACxCA,QAAQ,CAACC,MAAT,CAAgBC,KAAhB,CAAsBC,UAAtB,CAAiCC,MAAjC,CAAwCL,GAAxC,CACGM,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAeL,MAD5B,CADqB,CAAvB;AAKAM,MAAAA,OAAO,CAACC,GAAR,CAAYX,cAAZ;AACD,KA/B8B;AAAA;;AAQ/BY,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAExB,MAAAA;AAAF,QAAwB,KAAKyB,KAAnC,CADkB,CAElB;;AACA,UAAMC,aAAa,GAAG5B,SAAS,CAAC6B,UAAV,CAAqB,aAArB,CAAtB,CAHkB,CAOlB;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAWDC,EAAAA,oBAAoB,GAAG;AACrB,SAAKnB,uBAAL;AACD;;AAEDoB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKL,KAAvB;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,KAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,IAAI,EAAG,GAAEuB,KAAK,CAACC,IAAK;AAAG;AAFzB;AAGE,MAAA,MAAM,EAAGN,KAAD,iBACN,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEjB;AAA1C,SAAuDiB,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAQE,oBAAC,KAAD;AACE,MAAA,IAAI,EAAG,GAAEK,KAAK,CAACC,IAAK,gBADtB;AAEE,MAAA,MAAM,EAAGN,KAAD,iBACN,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEjB;AAAtC,SAAmDiB,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MARF,CADF;AAiBD;;AAzD8B;;AA4DjC,MAAMO,kBAAkB,GAAIC,QAAD,KAAe;AACxCjC,EAAAA,iBAAiB,EAAGkC,aAAD,IACjBD,QAAQ,CAACjC,iBAAiB,CAACkC,aAAD,CAAlB;AAF8B,CAAf,CAA3B;;AAKA,eAAerC,OAAO,CAAC,IAAD,EAAOmC,kBAAP,CAAP,CAAkC1B,QAAlC,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport {\r\n  firestore,\r\n  convertCollectionsSnapshotToMap,\r\n} from \"../../firebase/firebase.utils\";\r\nimport { updateCollections } from \"../../redux/shop/shop.actions\";\r\nimport WithSpinner from \"../../components/with-spinner/with-spinner.component\";\r\n\r\nimport CollectionsOverview from \"../../components/collections-overview/collections-overview.component\";\r\nimport CollectionPage from \"../collection/collection.component\";\r\n\r\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends Component {\r\n  state = {\r\n    loading: true,\r\n  };\r\n\r\n  // collections array (snapshot docs obj) from firestore\r\n  unsubscribeFromSnapshot = null;\r\n\r\n  componentDidMount() {\r\n    const { updateCollections } = this.props;\r\n    // QueryReference > collection reference\r\n    const collectionRef = firestore.collection(\"collections\");\r\n\r\n\r\n\r\n    // listen to collectionRef update > get actual data(collections array snapshot)\r\n    // collectionRef.get().then(snapshot => {\r\n    //     // Get collections obj data (converted from array)\r\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\r\n    //     updateCollections(collectionMap)\r\n    //     this.setState({ loading: false });\r\n    // })\r\n  }\r\n\r\n  getFirebaseData = (data) => {\r\n    const getCollections = data.documents.map((document) =>\r\n      document.fields.items.arrayValue.values.map(\r\n        (value) => value.mapValue.fields\r\n      )\r\n    );\r\n    console.log(getCollections)\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.unsubscribeFromSnapshot();\r\n  }\r\n\r\n  render() {\r\n    const { match } = this.props;\r\n    const { loading } = this.state;\r\n    return (\r\n      <div className=\"shop-page\">\r\n        <Route\r\n          exact\r\n          path={`${match.path}`} /* matching current path */\r\n          render={(props) => (\r\n            <CollectionOverviewWithSpinner isLoading={loading} {...props} />\r\n          )}\r\n        />\r\n        <Route\r\n          path={`${match.path}/:collectionId`}\r\n          render={(props) => (\r\n            <CollectionPageWithSpinner isLoading={loading} {...props} />\r\n          )}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  updateCollections: (collectionMap) =>\r\n    dispatch(updateCollections(collectionMap)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);\r\n"]},"metadata":{},"sourceType":"module"}