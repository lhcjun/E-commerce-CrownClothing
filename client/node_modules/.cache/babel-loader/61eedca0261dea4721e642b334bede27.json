{"ast":null,"code":"import ShopActionTypes from './shop.types';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nexport const fetchCollectionsStart = () => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_PENDING\n});\nexport const fetchCollectionsSuccess = collectionMap => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n  payload: collectionMap\n});\nexport const fetchCollectionsFailure = errorMessage => ({\n  type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\n  payload: errorMessage\n}); // async action\n\nexport const fetchCollectionsStartAsync = () => {\n  return dispatch => {\n    // QueryReference > collection reference\n    const collectionRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart()); // API call > get actual data(collections array snapshot) from firebase\n\n    collectionRef.get().then(snapshot => {\n      // Get collections obj data (converted from array)\n      const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n      dispatch(fetchCollectionsSuccess(collectionMap));\n    }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n  };\n};","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_PENDING","fetchCollectionsSuccess","collectionMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,cAA5B;AACA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AAEA,OAAO,MAAMC,qBAAqB,GAAG,OAAO;AACxCC,EAAAA,IAAI,EAAEJ,eAAe,CAACK;AADkB,CAAP,CAA9B;AAIP,OAAO,MAAMC,uBAAuB,GAAGC,aAAa,KAAK;AACrDH,EAAAA,IAAI,EAAEJ,eAAe,CAACQ,yBAD+B;AAErDC,EAAAA,OAAO,EAAEF;AAF4C,CAAL,CAA7C;AAKP,OAAO,MAAMG,uBAAuB,GAAGC,YAAY,KAAK;AACpDP,EAAAA,IAAI,EAAEJ,eAAe,CAACY,yBAD8B;AAEpDH,EAAAA,OAAO,EAAEE;AAF2C,CAAL,CAA5C,C,CAMP;;AACA,OAAO,MAAME,0BAA0B,GAAG,MAAM;AAC5C,SAAOC,QAAQ,IAAI;AACf;AACA,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB;AACAF,IAAAA,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CAHe,CAKf;;AACAY,IAAAA,aAAa,CACRE,GADL,GAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd;AACA,YAAMZ,aAAa,GAAGL,+BAA+B,CAACiB,QAAD,CAArD;AACAL,MAAAA,QAAQ,CAACR,uBAAuB,CAACC,aAAD,CAAxB,CAAR;AACH,KANL,EAOKa,KAPL,CAOWC,KAAK,IAAIP,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAP5B;AAQH,GAdD;AAeH,CAhBM","sourcesContent":["import ShopActionTypes from './shop.types';\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_PENDING\r\n});\r\n\r\nexport const fetchCollectionsSuccess = collectionMap => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = errorMessage => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n});\r\n\r\n\r\n// async action\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n        // QueryReference > collection reference\r\n        const collectionRef = firestore.collection(\"collections\");\r\n        dispatch(fetchCollectionsStart())\r\n\r\n        // API call > get actual data(collections array snapshot) from firebase\r\n        collectionRef\r\n            .get()\r\n            .then(snapshot => {\r\n                // Get collections obj data (converted from array)\r\n                const collectionMap = convertCollectionsSnapshotToMap(snapshot);\r\n                dispatch(fetchCollectionsSuccess(collectionMap))\r\n            })\r\n            .catch(error => dispatch(fetchCollectionsFailure(error.message)))\r\n    }\r\n};"]},"metadata":{},"sourceType":"module"}