{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions'; // actually sign in\n\nexport function* getSnapshotFromUserAuth(userAuth) {\n  try {\n    // get document reference (user data) back from firebase.utils\n    const userRef = yield call(createUserProfileDocument, userAuth); //  Get user actual data (snapShot)\n\n    const userSnapshot = yield userRef.get(); // dispatch new action > success - sign in\n\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    // destructor out  userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    // destructor out userAuth obj from return value\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // check if user has signed in\n\nexport function* isUserAuthenticated() {\n  try {\n    // 呼叫 getCurrentUser 並取回 userAuth obj\n    // 這裡的 userAuth 跟上面的 { user } 是同一個 obj\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return; // not sign in > exit\n    // 如果有 userAuth obj\n\n    yield getSnapshotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n} // base saga - google sign in\n\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle);\n} // base saga - email sign in\n\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail);\n} // base saga - memorize user sign in\n\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated)]);\n}","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapshotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_PENDING","onEmailSignInStart","EMAIL_SIGN_IN_PENDING","onCheckUserSession","CHECK_USER_SESSION","userSagas"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,IAA/B,QAA2C,oBAA3C;AACA,OAAOC,eAAP,MAA4B,cAA5B;AACA,SAASC,IAAT,EAAeC,cAAf,EAA+BC,yBAA/B,EAA0DC,cAA1D,QAAgF,+BAAhF;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,gBAA7C,C,CAGA;;AACA,OAAO,UAAUC,uBAAV,CAAmCC,QAAnC,EAA6C;AAChD,MAAG;AACC;AACA,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA4BK,QAA5B,CAA1B,CAFD,CAGC;;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B,CAJD,CAKC;;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAAEO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAnB;AAAuB,SAAGF,YAAY,CAACG,IAAb;AAA1B,KAAD,CAAd,CAAT;AACH,GAPD,CAOE,OAAMC,KAAN,EAAY;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,gBAAV,GAA4B;AAC/B,MAAG;AACC;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACgB,eAAL,CAAqBf,cAArB,CAAvB;AACA,UAAMK,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAJD,CAIE,OAAMF,KAAN,EAAY;AACV,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUI,eAAV,CAA0B;AAAEC,EAAAA,OAAO,EAAE;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT;AAAX,CAA1B,EAA2D;AAC9D,MAAG;AACC;AACA,UAAM;AAAEL,MAAAA;AAAF,QAAW,MAAMf,IAAI,CAACqB,0BAAL,CAAgCF,KAAhC,EAAuCC,QAAvC,CAAvB;AACA,UAAMd,uBAAuB,CAACS,IAAD,CAA7B;AACH,GAJD,CAIC,OAAMF,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ,C,CAED;;AACA,OAAO,UAAUS,mBAAV,GAA+B;AAClC,MAAG;AACC;AACA;AACA,UAAMf,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAG,CAACI,QAAJ,EAAc,OAJf,CAIwB;AACvB;;AACA,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AACH,GAPD,CAOC,OAAMM,KAAN,EAAY;AACT,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACH;AACJ,C,CAED;;AACA,OAAO,UAAUU,mBAAV,GAA+B;AAClC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,sBAAjB,EAAyCV,gBAAzC,CAAhB;AACH,C,CAED;;AACA,OAAO,UAAUW,kBAAV,GAA8B;AACjC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,qBAAjB,EAAwCT,eAAxC,CAAhB;AACH,C,CAED;;AACA,OAAO,UAAUU,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,kBAAjB,EAAqCN,mBAArC,CAAhB;AACH;AAED,OAAO,UAAUO,SAAV,GAAsB;AACzB,QAAMhC,GAAG,CAAC,CACNC,IAAI,CAACyB,mBAAD,CADE,EAENzB,IAAI,CAAC2B,kBAAD,CAFE,EAGN3B,IAAI,CAACwB,mBAAD,CAHE,CAAD,CAAT;AAKH","sourcesContent":["import { takeLatest, put, all, call } from 'redux-saga/effects';\r\nimport UserActionTypes from './user.types';\r\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\r\nimport { signInSuccess, signInFailure } from './user.actions';\r\n\r\n\r\n// actually sign in\r\nexport function* getSnapshotFromUserAuth (userAuth) {\r\n    try{\r\n        // get document reference (user data) back from firebase.utils\r\n        const userRef = yield call(createUserProfileDocument, userAuth)\r\n        //  Get user actual data (snapShot)\r\n        const userSnapshot = yield userRef.get();\r\n        // dispatch new action > success - sign in\r\n        yield put(signInSuccess({ id: userSnapshot.id, ...userSnapshot.data() }))\r\n    } catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithGoogle(){\r\n    try{\r\n        // destructor out  userAuth obj from return value\r\n        const { user } = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromUserAuth(user);\r\n    } catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\nexport function* signInWithEmail({ payload: { email, password } }){\r\n    try{\r\n        // destructor out userAuth obj from return value\r\n        const { user } = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromUserAuth(user);\r\n    }catch(error){\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\n\r\n// check if user has signed in\r\nexport function* isUserAuthenticated(){\r\n    try{\r\n        // 呼叫 getCurrentUser 並取回 userAuth obj\r\n        // 這裡的 userAuth 跟上面的 { user } 是同一個 obj\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return;  // not sign in > exit\r\n        // 如果有 userAuth obj\r\n        yield getSnapshotFromUserAuth(userAuth);\r\n    }catch(error){\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\n// base saga - google sign in\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_PENDING, signInWithGoogle)\r\n}\r\n\r\n// base saga - email sign in\r\nexport function* onEmailSignInStart(){\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_PENDING, signInWithEmail)\r\n}\r\n\r\n// base saga - memorize user sign in\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(isUserAuthenticated)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}