{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\Andrei's Course\\\\CRA\\\\E-commerce-CrownClothing\\\\src\\\\pages\\\\shop\\\\shop.component.jsx\";\nimport React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { updateCollections } from '../../redux/shop/shop.actions';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\nimport CollectionPage from '../collection/collection.component';\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\n\nclass ShopPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loading: true\n    };\n    this.unsubscribeFromSnapshot = null;\n  }\n\n  componentDidMount() {\n    const {\n      updateCollections\n    } = this.props; // QueryReference > collection reference\n\n    const collectionRef = firestore.collection('collections'); // getFirebaseData = data => {\n    //     const getCollection = data.documents.map(document => document.)\n    // }\n\n    fetch('https://firestore.googleapis.com/v1/projects/crwn-db-9e20e/databases/(default)/documents/collections').then(res => res.json()).then(collections => console.log(collections)); // listen to collectionRef update > get actual data(collections array snapshot)\n    // collectionRef.get().then(snapshot => {\n    //     // Get collections obj data (converted from array)\n    //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\n    //     updateCollections(collectionMap)\n    //     this.setState({ loading: false });\n    // })\n  }\n\n  componentWillUnmount() {\n    this.unsubscribeFromSnapshot();\n  }\n\n  render() {\n    const {\n      match\n    } = this.props;\n    const {\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"shop-page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      exact: true,\n      path: `${match.path}`\n      /* matching current path */\n      ,\n      render: props => /*#__PURE__*/React.createElement(CollectionOverviewWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 39\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: `${match.path}/:collectionId`,\n      render: props => /*#__PURE__*/React.createElement(CollectionPageWithSpinner, Object.assign({\n        isLoading: loading\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 39\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  updateCollections: collectionMap => dispatch(updateCollections(collectionMap))\n});\n\nexport default connect(null, mapDispatchToProps)(ShopPage);","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/pages/shop/shop.component.jsx"],"names":["React","Component","Route","connect","firestore","convertCollectionsSnapshotToMap","updateCollections","WithSpinner","CollectionsOverview","CollectionPage","CollectionOverviewWithSpinner","CollectionPageWithSpinner","ShopPage","state","loading","unsubscribeFromSnapshot","componentDidMount","props","collectionRef","collection","fetch","then","res","json","collections","console","log","componentWillUnmount","render","match","path","mapDispatchToProps","dispatch","collectionMap"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,SAAT,EAAoBC,+BAApB,QAA2D,+BAA3D;AACA,SAASC,iBAAT,QAAkC,+BAAlC;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AAEA,OAAOC,mBAAP,MAAgC,sEAAhC;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAGA,MAAMC,6BAA6B,GAAGH,WAAW,CAACC,mBAAD,CAAjD;AACA,MAAMG,yBAAyB,GAAGJ,WAAW,CAACE,cAAD,CAA7C;;AAEA,MAAMG,QAAN,SAAuBX,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAE7BY,KAF6B,GAErB;AACJC,MAAAA,OAAO,EAAE;AADL,KAFqB;AAAA,SAO7BC,uBAP6B,GAOH,IAPG;AAAA;;AAS7BC,EAAAA,iBAAiB,GAAE;AACf,UAAM;AAAEV,MAAAA;AAAF,QAAwB,KAAKW,KAAnC,CADe,CAEf;;AACA,UAAMC,aAAa,GAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CAHe,CAKf;AACA;AACA;;AAEAC,IAAAA,KAAK,CAAC,sGAAD,CAAL,CACKC,IADL,CACUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADjB,EAEKF,IAFL,CAEUG,WAAW,IAAIC,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAFzB,EATe,CAaf;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AAEDG,EAAAA,oBAAoB,GAAE;AAClB,SAAKZ,uBAAL;AACH;;AAEDa,EAAAA,MAAM,GAAE;AACJ,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKZ,KAAvB;AACA,UAAM;AAAEH,MAAAA;AAAF,QAAc,KAAKD,KAAzB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACI,MAAA,KAAK,MADT;AACU,MAAA,IAAI,EAAG,GAAEgB,KAAK,CAACC,IAAK;AAAM;AADpC;AAEI,MAAA,MAAM,EAAGb,KAAK,iBAAI,oBAAC,6BAAD;AAA+B,QAAA,SAAS,EAAEH;AAA1C,SAAuDG,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAKI,oBAAC,KAAD;AACI,MAAA,IAAI,EAAG,GAAEY,KAAK,CAACC,IAAK,gBADxB;AAEI,MAAA,MAAM,EAAGb,KAAK,iBAAI,oBAAC,yBAAD;AAA2B,QAAA,SAAS,EAAEH;AAAtC,SAAmDG,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAFtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALJ,CADJ;AAYH;;AAlD4B;;AAqDjC,MAAMc,kBAAkB,GAAGC,QAAQ,KAAK;AACpC1B,EAAAA,iBAAiB,EAAE2B,aAAa,IAAID,QAAQ,CAAC1B,iBAAiB,CAAC2B,aAAD,CAAlB;AADR,CAAL,CAAnC;;AAIA,eAAe9B,OAAO,CAAC,IAAD,EAAO4B,kBAAP,CAAP,CAAkCnB,QAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\r\nimport { updateCollections } from '../../redux/shop/shop.actions';\r\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\r\n\r\nimport CollectionsOverview from '../../components/collections-overview/collections-overview.component';\r\nimport CollectionPage from '../collection/collection.component';\r\n\r\n\r\nconst CollectionOverviewWithSpinner = WithSpinner(CollectionsOverview);\r\nconst CollectionPageWithSpinner = WithSpinner(CollectionPage);\r\n\r\nclass ShopPage extends Component {\r\n\r\n    state = {\r\n        loading: true \r\n    };\r\n    \r\n    // collections array (snapshot docs obj) from firestore\r\n    unsubscribeFromSnapshot = null;\r\n\r\n    componentDidMount(){\r\n        const { updateCollections } = this.props;\r\n        // QueryReference > collection reference\r\n        const collectionRef = firestore.collection('collections');\r\n\r\n        // getFirebaseData = data => {\r\n        //     const getCollection = data.documents.map(document => document.)\r\n        // }\r\n\r\n        fetch('https://firestore.googleapis.com/v1/projects/crwn-db-9e20e/databases/(default)/documents/collections')\r\n            .then(res => res.json())\r\n            .then(collections => console.log(collections))\r\n\r\n        // listen to collectionRef update > get actual data(collections array snapshot)\r\n        // collectionRef.get().then(snapshot => {\r\n        //     // Get collections obj data (converted from array)\r\n        //     const collectionMap = convertCollectionsSnapshotToMap(snapshot);\r\n        //     updateCollections(collectionMap)\r\n        //     this.setState({ loading: false });\r\n        // })\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        this.unsubscribeFromSnapshot();\r\n    }\r\n\r\n    render(){\r\n        const { match } = this.props;\r\n        const { loading } = this.state;\r\n        return(\r\n            <div className='shop-page'>\r\n                <Route \r\n                    exact path={`${match.path}`}    /* matching current path */\r\n                    render={ props => <CollectionOverviewWithSpinner isLoading={loading} {...props} /> }\r\n                />\r\n                <Route \r\n                    path={`${match.path}/:collectionId`} \r\n                    render={ props => <CollectionPageWithSpinner isLoading={loading} {...props} /> } \r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    updateCollections: collectionMap => dispatch(updateCollections(collectionMap))\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ShopPage);\r\n\r\n"]},"metadata":{},"sourceType":"module"}