{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAUg7byYFBQpqxY2LhAjYeIo-6GcttuU7g\",\n  authDomain: \"crwn-db-9e20e.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-9e20e.firebaseio.com\",\n  projectId: \"crwn-db-9e20e\",\n  storageBucket: \"crwn-db-9e20e.appspot.com\",\n  messagingSenderId: \"608014898428\",\n  appId: \"1:608014898428:web:064879518ef426d336f379\",\n  measurementId: \"G-8FGK6JNDJF\"\n}; // To get user data\n\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return; // exit  (no valid obj)\n  // QueryReference > document reference\n\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // QuerySnapshot > get document snapshot\n\n  const snapShot = await userRef.get(); // check if user data exist\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      // create snapShot - create a new user if not exist\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (err) {\n      console.log('error creating user', err.message);\n    }\n  }\n\n  return userRef;\n}; // set value into firebase\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  // create new collection ref obj\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    // create new document ref obj (in collection)  with unique id\n    const newDocRef = collectionRef.doc();\n    console.log(newDocRef); // set value with batch\n\n    batch.set(newDocRef, obj); // in obj\n  }); // fire batch req  >  commit will return promise\n\n  return await batch.commit();\n}; // To get collections array data > convert to obj\n\nexport const convertCollectionsSnapshotToMap = collections => {\n  // 轉換會寫在 doc obj (也就是 querySnapshot doc obj 的那個 ARRAY)\n  // get docs array(5)(collections) in querySnapshot obj\n  const transformedCollection = collections.doc.map(doc => {\n    // get actual data from each collection\n    // 如果要從 snapshot 取得資料 > 要用 data()\n    const {\n      title,\n      items\n    } = doc.data(); // return obj\n    // 從 map 回傳成 obj > 放入所有 frountend 要的 data\n\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n}; // encodeURI 是 JS render 自帶的 method > 把URI字符串採用UTF-8編碼格式轉化成escape格式的字符串\n// 傳入 URL 沒辦法處理的字符 > 轉成 URL 可以閱讀的\n\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore(); // Google auth provider\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/USER/Desktop/Andrei's Course/CRA/E-commerce-CrownClothing/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","err","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","map","title","items","data","routeName","encodeURI","toLowerCase","id","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAUg7byYFBQpqxY2LhAjYeIo-6GcttuU7g\",\r\n    authDomain: \"crwn-db-9e20e.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-9e20e.firebaseio.com\",\r\n    projectId: \"crwn-db-9e20e\",\r\n    storageBucket: \"crwn-db-9e20e.appspot.com\",\r\n    messagingSenderId: \"608014898428\",\r\n    appId: \"1:608014898428:web:064879518ef426d336f379\",\r\n    measurementId: \"G-8FGK6JNDJF\"\r\n};\r\n\r\n// To get user data\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n    if (!userAuth) return; // exit  (no valid obj)\r\n    // QueryReference > document reference\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    // QuerySnapshot > get document snapshot\r\n    const snapShot = await userRef.get();\r\n    // check if user data exist\r\n    if(!snapShot.exists){\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date();\r\n        try{\r\n            // create snapShot - create a new user if not exist\r\n            await userRef.set({ displayName, email, createdAt, ...additionalData })\r\n        }catch(err){\r\n            console.log('error creating user', err.message);\r\n        }\r\n    }\r\n    return userRef;\r\n}\r\n\r\n// set value into firebase\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n    // create new collection ref obj\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    console.log(collectionRef);\r\n\r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        // create new document ref obj (in collection)  with unique id\r\n        const newDocRef = collectionRef.doc();\r\n        console.log(newDocRef);\r\n        // set value with batch\r\n        batch.set(newDocRef, obj)   // in obj\r\n    })\r\n    // fire batch req  >  commit will return promise\r\n    return await batch.commit();\r\n}\r\n\r\n// To get collections array data > convert to obj\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n    // 轉換會寫在 doc obj (也就是 querySnapshot doc obj 的那個 ARRAY)\r\n    // get docs array(5)(collections) in querySnapshot obj\r\n    const transformedCollection = collections.doc.map(doc => {\r\n        // get actual data from each collection\r\n        // 如果要從 snapshot 取得資料 > 要用 data()\r\n        const { title, items } = doc.data();\r\n        // return obj\r\n        // 從 map 回傳成 obj > 放入所有 frountend 要的 data\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items\r\n        }\r\n    })\r\n    console.log(transformedCollection)\r\n}\r\n\r\n// encodeURI 是 JS render 自帶的 method > 把URI字符串採用UTF-8編碼格式轉化成escape格式的字符串\r\n// 傳入 URL 沒辦法處理的字符 > 轉成 URL 可以閱讀的\r\n\r\n\r\nfirebase.initializeApp(config);\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n// Google auth provider\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\nprovider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}